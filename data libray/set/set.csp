
module SET(setType)
  channel add, remove, new, error: setType
  channel isEmpty: Bool

  SetInterfaceAlpha = {| add, remove, isEmpty |}
  SetControlAlpha = {| cellEmpty |}

  NotMember(x) =
    isEmpty.True -> NotMember(x)
    []
    isEmpty.False -> NotMember(x)
    []
  	add.x ->
  --	new.x ->
  	Member(x)

  Member(x) =
--  (
--  	add.x ->
  --	error.x ->
--  	Member(x)
--  )
--  []
  isEmpty.False -> Member(x)
  []
  (
  	remove.x ->
  	NotMember(x)
  )


  Control(setEmpty) =
    isEmpty.setEmpty -> Control(setEmpty)
    []
    add?_ -> Control(False)
    []
    remove?_ -> (isEmpty.True -> Control(True) [] isEmpty.False -> Control(False))



exports
  tSet = ([| SetControlAlpha |] x : setType @ NotMember(x)) [| SetInterfaceAlpha |] Control(True)
endmodule


instance mySet = SET({0..1})
assert mySet::tSet :[deadlock free [F]]
