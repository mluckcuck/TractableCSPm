value = {0..7}

minStackId = 0
maxStackId = 7

channel push, top, error: value
channel pop

Q1(sequence) =
{-if 	sequence == <0> then
	(
		push?x ->
		P(sequence^<x>)
	)
	[]
	(
		top!head(sequence) ->
		P(sequence)
	)
else -}
	(#sequence < maxStackId)&
	(
		push?x ->
		Q1(<x>^sequence)
	)
	[]
	(
	(not null(sequence)) & 
	(
			(
				pop -> 
				Q1(tail(sequence))
			)
			[]
			(
				top!head(sequence) ->
				Q1(sequence)
			)
		)
	)


assert Q1(<>) :[deadlock free [F]]

channel push', top'  : value.value
channel resume',pop': value



Free(id) = 
	push'.id?v -> Full(id, v)

Full(id, v) =
	--(id > 0)&
	pop'.id-> 
	(	
		if id > minStackId then
			resume'.id-1 -> Free(id)
		else
			Free(id)
	)
	[]
	(id < maxStackId-1 )&
		push'.id+1?_ -> resume'.id -> Full(id, v)
	[]
	top'.id!v -> Full(id, v)

AlphaFree(id) =
	Union ({
				{| push'.id,pop'.id, resume'.id, top'.id |},
				{| push'.id+1 | id<maxStackId  |},
				{| resume'.id-1 | id > minStackId  |}
			})

Q2 = 
(
(
	(	|| i : value @ [ AlphaFree(i) ] Free(i)
	)
) \ {| resume'|}
)

[[pop'.id <- pop, push'.id <- push, top'.id <- top | id <- value  ]]

assert Q2 :[deadlock free [F]]


assert Q1(<>) [T= Q2
assert Q2 [T= Q1(<>)

assert Q1(<>) [F= Q2
assert Q2 [F= Q1(<>)

assert Q1(<>) [FD= Q2
assert Q2 [FD= Q1(<>)


